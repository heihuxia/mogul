import React, { Fragment } from 'react';
import { Form, Button, Card, Divider } from 'antd';
import { observer } from 'mobx-react';
import {
  StandardTable,
  CreateList,
  Modal,
  BaseCollection
} from 'mogul';
import Query from './Query';
import Store from './Store';

const columns = [
  {
    title: '名称',
    key: 'name',
    render: ({ name: { first, last } }) => <div>{`${first} ${last}`}</div>
  },
  {
    title: '性别',
    key: 'gender',
    render: ({ gender }) => <div>{gender === 'male' ? '男' : '女'}</div>
  },
  {
    title: 'email',
    dataIndex: 'email'
  },
  {
    title: '操作',
    key: 'actions',
    render: props => {
      const columns = [
        {
          title: '名称',
          key: 'name',
          render: ({ name: { first, last } }) => <div>{`${first} ${last}`}</div>
        },
        {
          title: '性别',
          key: 'gender',
          render: ({ gender }) => <div>{gender === 'male' ? '男' : '女'}</div>
        }
      ];
      const content = CreateList(columns, {
        labelCol: 10,
        contentCol: 14,
        column: 2
      })(props);
      return (
        <Fragment>
          <Modal title="查看" content={content} inline>
            <a>查看</a>
          </Modal>
          <Divider type="vertical" />
          <a>删除</a>
        </Fragment>
      );
    }
  }
];

// Form必须在业务顶层组件载入，因为在表格变化时，例如分页操作，会需要获取form的值
@Form.create()
@observer
class Collection extends BaseCollection {
  constructor(props) {
    super(props);
    this.state = {
      formValues: {}
    };
    this.handleTableChange = this.createHandleTableChange(Store).bind(this);
    this.handleFormReset = this.createHandleFormReset(Store).bind(this);
    this.handleSearch = this.createHandleSearch(
      Store,
      this.formatFormValues
    ).bind(this);
    this.componentDidMount = this.createComponentDidMount(Store).bind(this);
  }

  formatFormValues(values) {
    // 格式化表单查询的参数
    return values;
  }

  bindHandlersForEachRow(list) {
    // 给row绑定数据，可以在columns中调用
    const { options } = Store;
    return list.map(item => ({
      ...item,
      options
    }));
  }

  TableButtons = (
    <Fragment>
      <Button type="primary" size="small">
        主按钮
      </Button>
    </Fragment>
  );

  render() {
    const { list, options, pagination, loading } = Store;
    const data = {
      list: this.bindHandlersForEachRow(list),
      pagination
    };
    return (
      <Card bordered={false}>
        <Query
          options={options}
          form={this.props.form}
          handleSearch={this.handleSearch}
          handleFormReset={this.handleFormReset}
        />
        <StandardTable
          loading={loading}
          data={data}
          columns={columns}
          onChange={this.handleTableChange}
          buttons={this.TableButtons}
        />
      </Card>
    );
  }
}

export default Collection;
